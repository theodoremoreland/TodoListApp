import PushNotification from 'react-native-push-notification';


PushNotification.createChannel ({
  channelId: "com.todolistapp", // (required)
  channelName: "com.todolistapp", // (required)
  channelDescription: "A channel to categorize your notifications", // (optional) default: undefined.
  playSound: false, // (optional) default: true
  soundName: "default", // (optional) See soundName parameter of localNotification function
  importance: 4, // (optional) default: 4. Int value of the Android notification importance
  vibrate: true, // (optional) default: true. Creates the default vibration patten if true.
},
(created) => console.log (`createChannel returned ${created}`) // (optional) callback returns whether the channel was created, false means it already existed.
);


PushNotification.configure({
    // (optional) Called when Token is generated (iOS and Android)
    onRegister: function(token) {
        console.log( 'TOKEN:', token );
    },

    // (required) Called when a remote or local notification is opened or received
    onNotification: function(notification) {
        console.log( 'NOTIFICATION:', notification );
    },

    // Should the initial notification be popped automatically
    // default: true
    popInitialNotification: true,

    /**
      * (optional) default: true
      * - Specified if permissions (ios) and token (android and ios) will requested or not,
      * - if not, you must call PushNotificationsHandler.requestPermissions() later
      */
    requestPermissions: false,
});


export const scheduleNotification = (scheduledTime : Date, taskID : number, taskName : string) : void => {
    PushNotification.localNotificationSchedule({
        //... You can use all the options from localNotifications
        message: `Open the todolist app to mark this task as completed.`,
        channelId: "com.todolistapp",
        id: taskID, // (optional) Valid unique 32 bit integer specified as string. default: Autogenerated Unique ID
        title: `${taskName} is due now!`,
        vibrate: true, // (optional) default: true
        vibration: 300, // vibration length in milliseconds, ignored if vibrate=false, default: 1000
        ongoing: false, // (optional) set whether this is an "ongoing" notification
        date: scheduledTime,
        allowWhileIdle: true, // (optional) set notification to work while on doze, default: false
      });
};

export const cancelNotification = (taskID : number) : void => {
    PushNotification.cancelLocalNotifications({id: taskID.toString()});
};